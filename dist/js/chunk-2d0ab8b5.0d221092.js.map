{"version":3,"sources":["webpack:///./src/components/EffectNode/AppVue/Curves.vue?4673","webpack:///./node_modules/three/examples/jsm/controls/TransformControls.js","webpack:///./src/components/EffectNode/Packages/Curves/Curves.js","webpack:///./src/components/EffectNode/Packages/Curves/CurvesCanvas.js","webpack:///src/components/EffectNode/AppVue/Curves.vue","webpack:///./src/components/EffectNode/AppVue/Curves.vue?793d","webpack:///./src/components/EffectNode/AppVue/Curves.vue"],"names":["_vm","this","_h","$createElement","_c","_self","staticClass","ref","_e","staticRenderFns","TransformControls","camera","domElement","undefined","console","warn","document","call","visible","_gizmo","TransformControlsGizmo","add","_plane","TransformControlsPlane","scope","defineProperty","changeEvent","type","mouseDownEvent","mouseUpEvent","mode","objectChangeEvent","raycaster","intersectObjectWithRay","object","includeInvisible","allIntersections","intersectObject","i","length","_tempVector","_tempVector2","_tempQuaternion","_unit","X","Y","Z","pointStart","pointEnd","offset","rotationAxis","startNorm","endNorm","rotationAngle","cameraPosition","cameraQuaternion","cameraScale","parentPosition","parentQuaternion","parentQuaternionInv","parentScale","worldPositionStart","worldQuaternionStart","worldScaleStart","worldPosition","worldQuaternion","worldQuaternionInv","worldScale","eye","positionStart","quaternionStart","scaleStart","propName","defaultValue","propValue","Object","get","set","value","dispatchEvent","getPointer","event","ownerDocument","pointerLockElement","x","y","button","pointer","changedTouches","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","onPointerHover","enabled","pointerType","pointerHover","onPointerDown","style","touchAction","addEventListener","onPointerMove","pointerDown","pointerMove","onPointerUp","removeEventListener","pointerUp","dispose","traverse","child","geometry","material","attach","detach","axis","updateMatrixWorld","parent","error","matrixWorld","decompose","copy","inverse","sub","normalize","prototype","dragging","setFromCamera","intersect","picker","name","planeIntersect","space","snap","rotationSnap","rotation","Math","round","z","position","quaternion","scale","point","applyQuaternion","indexOf","divide","translationSnap","search","setFromMatrixPosition","d","dot","multiply","scaleSnap","ROTATION_SPEED","distanceTo","angleTo","cross","setFromAxisAngle","getMode","setMode","setTranslationSnap","setRotationSnap","setScaleSnap","setSize","size","setSpace","update","assign","create","constructor","isTransformControls","gizmoMaterial","depthTest","depthWrite","transparent","side","fog","toneMapped","gizmoLineMaterial","linewidth","matInvisible","clone","opacity","matHelper","matRed","color","matGreen","matBlue","matWhiteTransparent","matYellowTransparent","matCyanTransparent","matMagentaTransparent","matYellow","matLineRed","matLineGreen","matLineBlue","matLineCyan","matLineMagenta","matLineYellow","matLineGray","matLineYellowTransparent","arrowGeometry","scaleHandleGeometry","lineGeometry","setAttribute","CircleGeometry","radius","arc","vertices","push","cos","PI","sin","TranslateHelperGeometry","gizmoTranslate","XYZ","XY","YZ","XZ","pickerTranslate","helperTranslate","START","END","DELTA","gizmoRotate","E","XYZE","helperRotate","AXIS","pickerRotate","gizmoScale","XYZX","XYZY","XYZZ","pickerScale","helperScale","setupGizmo","gizmoMap","gizmo","tag","updateMatrix","tempGeometry","applyMatrix4","matrix","renderOrder","Infinity","tempVector","tempEuler","alignVector","zeroVector","lookAtMatrix","tempQuaternion","tempQuaternion2","identityQuaternion","unitX","unitY","unitZ","helper","handles","concat","children","factor","handle","isOrthographicCamera","bottom","zoom","min","tan","fov","multiplyScalar","AXIS_HIDE_TRESHOLD","PLANE_HIDE_TRESHOLD","AXIS_FLIP_TRESHOLD","abs","setFromRotationMatrix","lookAt","atan2","multiplyQuaternions","showX","showY","showZ","_opacity","_color","split","some","a","lerp","setFromEuler","isTransformControlsGizmo","wireframe","dirVector","tempMatrix","isTransformControlsPlane","Curves","ctx","runEditor","dimension","count","pow","numSides","subdivisions","openEnded","geo","LineGeo","controlPoints","THREE","getRollGLSL","pts","ifthenelse","floatval","Number","toFixed","forEach","val","idx","res","makeTubeGLSL","item","makeGLSLVertex","getMat","RawShaderMaterial","uniforms","time","vertexShader","fragmentShader","defines","lengthSegments","onLoop","window","performance","now","lanCurve","instanceCount","floor","frustumCulled","userData","bloom","scene","getArr","tout","setArr","v","clearTimeout","setTimeout","Editor","transformControl","renderer","splineHelperObjects","splinePointsLength","positions","onUpPosition","onDownPosition","ARC_SEGMENTS","splines","params","uniform","tension","centripetal","chordal","addPoint","removePoint","exportSpline","init","light","angle","castShadow","shadow","near","far","bias","mapSize","planeGeometry","rotateX","planeMaterial","plane","receiveShadow","setPixelRatio","devicePixelRatio","innerWidth","innerHeight","shadowMap","getgui","dat","gui","destroy","log","open","OrbitControls","require","root","controls","el","damping","render","updateSplineOutline","addSplineObject","Float32Array","curve","k","curveType","mesh","spline","load","random","pop","remove","animate","delay","splineMesh","attributes","t","getPoint","setXYZ","needsUpdate","strplace","p","join","code","prompt","new_positions","requestAnimationFrame","intersects","intersectObjects","baseGeometry","rotateZ","tmpVec","xPositions","angles","uvs","faceVertexUvs","faces","face","b","c","v0","v1","v2","verts","faceUvs","j","toArray","posArray","angleArray","uvArray","u","offsets","ddxy","ceil","ddxyz","reader","CurvesCanvas","GLRenderer","GLCamera","Scene","background","Color","node","EffectNode","components","MenuArea","data","getApp","mounted","beforeDestroy","location","reload","component"],"mappings":"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","file":"js/chunk-2d0ab8b5.0d221092.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"full\"},[_c('div',{ref:\"kv1\",staticClass:\"full absolute top-0 left-0\"}),(_vm.getApp)?_c('div',{staticClass:\"absolute top-0 left-0 text-white\"},[_c('MenuArea')],1):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import {\n\tBoxBufferGeometry,\n\tBufferGeometry,\n\tColor,\n\tCylinderBufferGeometry,\n\tDoubleSide,\n\tEuler,\n\tFloat32BufferAttribute,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tOctahedronBufferGeometry,\n\tPlaneBufferGeometry,\n\tQuaternion,\n\tRaycaster,\n\tSphereBufferGeometry,\n\tTorusBufferGeometry,\n\tVector3\n} from \"../../../build/three.module.js\";\n\nvar TransformControls = function ( camera, domElement ) {\n\n\tif ( domElement === undefined ) {\n\n\t\tconsole.warn( 'THREE.TransformControls: The second parameter \"domElement\" is now mandatory.' );\n\t\tdomElement = document;\n\n\t}\n\n\tObject3D.call( this );\n\n\tthis.visible = false;\n\tthis.domElement = domElement;\n\n\tvar _gizmo = new TransformControlsGizmo();\n\tthis.add( _gizmo );\n\n\tvar _plane = new TransformControlsPlane();\n\tthis.add( _plane );\n\n\tvar scope = this;\n\n\t// Define properties with getters/setter\n\t// Setting the defined property will automatically trigger change event\n\t// Defined properties are passed down to gizmo and plane\n\n\tdefineProperty( \"camera\", camera );\n\tdefineProperty( \"object\", undefined );\n\tdefineProperty( \"enabled\", true );\n\tdefineProperty( \"axis\", null );\n\tdefineProperty( \"mode\", \"translate\" );\n\tdefineProperty( \"translationSnap\", null );\n\tdefineProperty( \"rotationSnap\", null );\n\tdefineProperty( \"scaleSnap\", null );\n\tdefineProperty( \"space\", \"world\" );\n\tdefineProperty( \"size\", 1 );\n\tdefineProperty( \"dragging\", false );\n\tdefineProperty( \"showX\", true );\n\tdefineProperty( \"showY\", true );\n\tdefineProperty( \"showZ\", true );\n\n\tvar changeEvent = { type: \"change\" };\n\tvar mouseDownEvent = { type: \"mouseDown\" };\n\tvar mouseUpEvent = { type: \"mouseUp\", mode: scope.mode };\n\tvar objectChangeEvent = { type: \"objectChange\" };\n\n\t// Reusable utility variables\n\n\tvar raycaster = new Raycaster();\n\n\tfunction intersectObjectWithRay( object, raycaster, includeInvisible ) {\n\n\t\tvar allIntersections = raycaster.intersectObject( object, true );\n\n\t\tfor ( var i = 0; i < allIntersections.length; i ++ ) {\n\n\t\t\tif ( allIntersections[ i ].object.visible || includeInvisible ) {\n\n\t\t\t\treturn allIntersections[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tvar _tempVector = new Vector3();\n\tvar _tempVector2 = new Vector3();\n\tvar _tempQuaternion = new Quaternion();\n\tvar _unit = {\n\t\tX: new Vector3( 1, 0, 0 ),\n\t\tY: new Vector3( 0, 1, 0 ),\n\t\tZ: new Vector3( 0, 0, 1 )\n\t};\n\n\tvar pointStart = new Vector3();\n\tvar pointEnd = new Vector3();\n\tvar offset = new Vector3();\n\tvar rotationAxis = new Vector3();\n\tvar startNorm = new Vector3();\n\tvar endNorm = new Vector3();\n\tvar rotationAngle = 0;\n\n\tvar cameraPosition = new Vector3();\n\tvar cameraQuaternion = new Quaternion();\n\tvar cameraScale = new Vector3();\n\n\tvar parentPosition = new Vector3();\n\tvar parentQuaternion = new Quaternion();\n\tvar parentQuaternionInv = new Quaternion();\n\tvar parentScale = new Vector3();\n\n\tvar worldPositionStart = new Vector3();\n\tvar worldQuaternionStart = new Quaternion();\n\tvar worldScaleStart = new Vector3();\n\n\tvar worldPosition = new Vector3();\n\tvar worldQuaternion = new Quaternion();\n\tvar worldQuaternionInv = new Quaternion();\n\tvar worldScale = new Vector3();\n\n\tvar eye = new Vector3();\n\n\tvar positionStart = new Vector3();\n\tvar quaternionStart = new Quaternion();\n\tvar scaleStart = new Vector3();\n\n\t// TODO: remove properties unused in plane and gizmo\n\n\tdefineProperty( \"worldPosition\", worldPosition );\n\tdefineProperty( \"worldPositionStart\", worldPositionStart );\n\tdefineProperty( \"worldQuaternion\", worldQuaternion );\n\tdefineProperty( \"worldQuaternionStart\", worldQuaternionStart );\n\tdefineProperty( \"cameraPosition\", cameraPosition );\n\tdefineProperty( \"cameraQuaternion\", cameraQuaternion );\n\tdefineProperty( \"pointStart\", pointStart );\n\tdefineProperty( \"pointEnd\", pointEnd );\n\tdefineProperty( \"rotationAxis\", rotationAxis );\n\tdefineProperty( \"rotationAngle\", rotationAngle );\n\tdefineProperty( \"eye\", eye );\n\n\t{\n\n\t\tdomElement.addEventListener( \"pointerdown\", onPointerDown, false );\n\t\tdomElement.addEventListener( \"pointermove\", onPointerHover, false );\n\t\tscope.domElement.ownerDocument.addEventListener( \"pointerup\", onPointerUp, false );\n\n\t}\n\n\tthis.dispose = function () {\n\n\t\tdomElement.removeEventListener( \"pointerdown\", onPointerDown );\n\t\tdomElement.removeEventListener( \"pointermove\", onPointerHover );\n\t\tscope.domElement.ownerDocument.removeEventListener( \"pointermove\", onPointerMove );\n\t\tscope.domElement.ownerDocument.removeEventListener( \"pointerup\", onPointerUp );\n\n\t\tthis.traverse( function ( child ) {\n\n\t\t\tif ( child.geometry ) child.geometry.dispose();\n\t\t\tif ( child.material ) child.material.dispose();\n\n\t\t} );\n\n\t};\n\n\t// Set current object\n\tthis.attach = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.visible = true;\n\n\t\treturn this;\n\n\t};\n\n\t// Detatch from object\n\tthis.detach = function () {\n\n\t\tthis.object = undefined;\n\t\tthis.visible = false;\n\t\tthis.axis = null;\n\n\t\treturn this;\n\n\t};\n\n\t// Defined getter, setter and store for a property\n\tfunction defineProperty( propName, defaultValue ) {\n\n\t\tvar propValue = defaultValue;\n\n\t\tObject.defineProperty( scope, propName, {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn propValue !== undefined ? propValue : defaultValue;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tif ( propValue !== value ) {\n\n\t\t\t\t\tpropValue = value;\n\t\t\t\t\t_plane[ propName ] = value;\n\t\t\t\t\t_gizmo[ propName ] = value;\n\n\t\t\t\t\tscope.dispatchEvent( { type: propName + \"-changed\", value: value } );\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tscope[ propName ] = defaultValue;\n\t\t_plane[ propName ] = defaultValue;\n\t\t_gizmo[ propName ] = defaultValue;\n\n\t}\n\n\t// updateMatrixWorld  updates key transformation variables\n\tthis.updateMatrixWorld = function () {\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\tif ( this.object.parent === null ) {\n\n\t\t\t\tconsole.error( 'TransformControls: The attached 3D object must be a part of the scene graph.' );\n\n\t\t\t} else {\n\n\t\t\t\tthis.object.parent.matrixWorld.decompose( parentPosition, parentQuaternion, parentScale );\n\n\t\t\t}\n\n\t\t\tthis.object.matrixWorld.decompose( worldPosition, worldQuaternion, worldScale );\n\n\t\t\tparentQuaternionInv.copy( parentQuaternion ).inverse();\n\t\t\tworldQuaternionInv.copy( worldQuaternion ).inverse();\n\n\t\t}\n\n\t\tthis.camera.updateMatrixWorld();\n\t\tthis.camera.matrixWorld.decompose( cameraPosition, cameraQuaternion, cameraScale );\n\n\t\teye.copy( cameraPosition ).sub( worldPosition ).normalize();\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this );\n\n\t};\n\n\tthis.pointerHover = function ( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true ) return;\n\n\t\traycaster.setFromCamera( pointer, this.camera );\n\n\t\tvar intersect = intersectObjectWithRay( _gizmo.picker[ this.mode ], raycaster );\n\n\t\tif ( intersect ) {\n\n\t\t\tthis.axis = intersect.object.name;\n\n\t\t} else {\n\n\t\t\tthis.axis = null;\n\n\t\t}\n\n\t};\n\n\tthis.pointerDown = function ( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true || pointer.button !== 0 ) return;\n\n\t\tif ( this.axis !== null ) {\n\n\t\t\traycaster.setFromCamera( pointer, this.camera );\n\n\t\t\tvar planeIntersect = intersectObjectWithRay( _plane, raycaster, true );\n\n\t\t\tif ( planeIntersect ) {\n\n\t\t\t\tvar space = this.space;\n\n\t\t\t\tif ( this.mode === 'scale' ) {\n\n\t\t\t\t\tspace = 'local';\n\n\t\t\t\t} else if ( this.axis === 'E' || this.axis === 'XYZE' || this.axis === 'XYZ' ) {\n\n\t\t\t\t\tspace = 'world';\n\n\t\t\t\t}\n\n\t\t\t\tif ( space === 'local' && this.mode === 'rotate' ) {\n\n\t\t\t\t\tvar snap = this.rotationSnap;\n\n\t\t\t\t\tif ( this.axis === 'X' && snap ) this.object.rotation.x = Math.round( this.object.rotation.x / snap ) * snap;\n\t\t\t\t\tif ( this.axis === 'Y' && snap ) this.object.rotation.y = Math.round( this.object.rotation.y / snap ) * snap;\n\t\t\t\t\tif ( this.axis === 'Z' && snap ) this.object.rotation.z = Math.round( this.object.rotation.z / snap ) * snap;\n\n\t\t\t\t}\n\n\t\t\t\tthis.object.updateMatrixWorld();\n\t\t\t\tthis.object.parent.updateMatrixWorld();\n\n\t\t\t\tpositionStart.copy( this.object.position );\n\t\t\t\tquaternionStart.copy( this.object.quaternion );\n\t\t\t\tscaleStart.copy( this.object.scale );\n\n\t\t\t\tthis.object.matrixWorld.decompose( worldPositionStart, worldQuaternionStart, worldScaleStart );\n\n\t\t\t\tpointStart.copy( planeIntersect.point ).sub( worldPositionStart );\n\n\t\t\t}\n\n\t\t\tthis.dragging = true;\n\t\t\tmouseDownEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( mouseDownEvent );\n\n\t\t}\n\n\t};\n\n\tthis.pointerMove = function ( pointer ) {\n\n\t\tvar axis = this.axis;\n\t\tvar mode = this.mode;\n\t\tvar object = this.object;\n\t\tvar space = this.space;\n\n\t\tif ( mode === 'scale' ) {\n\n\t\t\tspace = 'local';\n\n\t\t} else if ( axis === 'E' || axis === 'XYZE' || axis === 'XYZ' ) {\n\n\t\t\tspace = 'world';\n\n\t\t}\n\n\t\tif ( object === undefined || axis === null || this.dragging === false || pointer.button !== - 1 ) return;\n\n\t\traycaster.setFromCamera( pointer, this.camera );\n\n\t\tvar planeIntersect = intersectObjectWithRay( _plane, raycaster, true );\n\n\t\tif ( ! planeIntersect ) return;\n\n\t\tpointEnd.copy( planeIntersect.point ).sub( worldPositionStart );\n\n\t\tif ( mode === 'translate' ) {\n\n\t\t\t// Apply translate\n\n\t\t\toffset.copy( pointEnd ).sub( pointStart );\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\toffset.applyQuaternion( worldQuaternionInv );\n\n\t\t\t}\n\n\t\t\tif ( axis.indexOf( 'X' ) === - 1 ) offset.x = 0;\n\t\t\tif ( axis.indexOf( 'Y' ) === - 1 ) offset.y = 0;\n\t\t\tif ( axis.indexOf( 'Z' ) === - 1 ) offset.z = 0;\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\toffset.applyQuaternion( quaternionStart ).divide( parentScale );\n\n\t\t\t} else {\n\n\t\t\t\toffset.applyQuaternion( parentQuaternionInv ).divide( parentScale );\n\n\t\t\t}\n\n\t\t\tobject.position.copy( offset ).add( positionStart );\n\n\t\t\t// Apply translation snap\n\n\t\t\tif ( this.translationSnap ) {\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\tobject.position.applyQuaternion( _tempQuaternion.copy( quaternionStart ).inverse() );\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.position.applyQuaternion( quaternionStart );\n\n\t\t\t\t}\n\n\t\t\t\tif ( space === 'world' ) {\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.add( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.sub( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'scale' ) {\n\n\t\t\tif ( axis.search( 'XYZ' ) !== - 1 ) {\n\n\t\t\t\tvar d = pointEnd.length() / pointStart.length();\n\n\t\t\t\tif ( pointEnd.dot( pointStart ) < 0 ) d *= - 1;\n\n\t\t\t\t_tempVector2.set( d, d, d );\n\n\t\t\t} else {\n\n\t\t\t\t_tempVector.copy( pointStart );\n\t\t\t\t_tempVector2.copy( pointEnd );\n\n\t\t\t\t_tempVector.applyQuaternion( worldQuaternionInv );\n\t\t\t\t_tempVector2.applyQuaternion( worldQuaternionInv );\n\n\t\t\t\t_tempVector2.divide( _tempVector );\n\n\t\t\t\tif ( axis.search( 'X' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.x = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.y = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.z = 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Apply scale\n\n\t\t\tobject.scale.copy( scaleStart ).multiply( _tempVector2 );\n\n\t\t\tif ( this.scaleSnap ) {\n\n\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.x = Math.round( object.scale.x / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.y = Math.round( object.scale.y / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.z = Math.round( object.scale.z / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'rotate' ) {\n\n\t\t\toffset.copy( pointEnd ).sub( pointStart );\n\n\t\t\tvar ROTATION_SPEED = 20 / worldPosition.distanceTo( _tempVector.setFromMatrixPosition( this.camera.matrixWorld ) );\n\n\t\t\tif ( axis === 'E' ) {\n\n\t\t\t\trotationAxis.copy( eye );\n\t\t\t\trotationAngle = pointEnd.angleTo( pointStart );\n\n\t\t\t\tstartNorm.copy( pointStart ).normalize();\n\t\t\t\tendNorm.copy( pointEnd ).normalize();\n\n\t\t\t\trotationAngle *= ( endNorm.cross( startNorm ).dot( eye ) < 0 ? 1 : - 1 );\n\n\t\t\t} else if ( axis === 'XYZE' ) {\n\n\t\t\t\trotationAxis.copy( offset ).cross( eye ).normalize();\n\t\t\t\trotationAngle = offset.dot( _tempVector.copy( rotationAxis ).cross( this.eye ) ) * ROTATION_SPEED;\n\n\t\t\t} else if ( axis === 'X' || axis === 'Y' || axis === 'Z' ) {\n\n\t\t\t\trotationAxis.copy( _unit[ axis ] );\n\n\t\t\t\t_tempVector.copy( _unit[ axis ] );\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\t_tempVector.applyQuaternion( worldQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\trotationAngle = offset.dot( _tempVector.cross( eye ).normalize() ) * ROTATION_SPEED;\n\n\t\t\t}\n\n\t\t\t// Apply rotation snap\n\n\t\t\tif ( this.rotationSnap ) rotationAngle = Math.round( rotationAngle / this.rotationSnap ) * this.rotationSnap;\n\n\t\t\tthis.rotationAngle = rotationAngle;\n\n\t\t\t// Apply rotate\n\t\t\tif ( space === 'local' && axis !== 'E' && axis !== 'XYZE' ) {\n\n\t\t\t\tobject.quaternion.copy( quaternionStart );\n\t\t\t\tobject.quaternion.multiply( _tempQuaternion.setFromAxisAngle( rotationAxis, rotationAngle ) ).normalize();\n\n\t\t\t} else {\n\n\t\t\t\trotationAxis.applyQuaternion( parentQuaternionInv );\n\t\t\t\tobject.quaternion.copy( _tempQuaternion.setFromAxisAngle( rotationAxis, rotationAngle ) );\n\t\t\t\tobject.quaternion.multiply( quaternionStart ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( changeEvent );\n\t\tthis.dispatchEvent( objectChangeEvent );\n\n\t};\n\n\tthis.pointerUp = function ( pointer ) {\n\n\t\tif ( pointer.button !== 0 ) return;\n\n\t\tif ( this.dragging && ( this.axis !== null ) ) {\n\n\t\t\tmouseUpEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( mouseUpEvent );\n\n\t\t}\n\n\t\tthis.dragging = false;\n\t\tthis.axis = null;\n\n\t};\n\n\t// normalize mouse / touch pointer and remap {x,y} to view space.\n\n\tfunction getPointer( event ) {\n\n\t\tif ( scope.domElement.ownerDocument.pointerLockElement ) {\n\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tbutton: event.button\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tvar pointer = event.changedTouches ? event.changedTouches[ 0 ] : event;\n\n\t\t\tvar rect = domElement.getBoundingClientRect();\n\n\t\t\treturn {\n\t\t\t\tx: ( pointer.clientX - rect.left ) / rect.width * 2 - 1,\n\t\t\t\ty: - ( pointer.clientY - rect.top ) / rect.height * 2 + 1,\n\t\t\t\tbutton: event.button\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// mouse / touch event handlers\n\n\tfunction onPointerHover( event ) {\n\n\t\tif ( ! scope.enabled ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tscope.pointerHover( getPointer( event ) );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onPointerDown( event ) {\n\n\t\tif ( ! scope.enabled ) return;\n\n\t\tscope.domElement.style.touchAction = 'none'; // disable touch scroll\n\t\tscope.domElement.ownerDocument.addEventListener( \"pointermove\", onPointerMove, false );\n\n\t\tscope.pointerHover( getPointer( event ) );\n\t\tscope.pointerDown( getPointer( event ) );\n\n\t}\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( ! scope.enabled ) return;\n\n\t\tscope.pointerMove( getPointer( event ) );\n\n\t}\n\n\tfunction onPointerUp( event ) {\n\n\t\tif ( ! scope.enabled ) return;\n\n\t\tscope.domElement.style.touchAction = '';\n\t\tscope.domElement.ownerDocument.removeEventListener( \"pointermove\", onPointerMove, false );\n\n\t\tscope.pointerUp( getPointer( event ) );\n\n\t}\n\n\t// TODO: deprecate\n\n\tthis.getMode = function () {\n\n\t\treturn scope.mode;\n\n\t};\n\n\tthis.setMode = function ( mode ) {\n\n\t\tscope.mode = mode;\n\n\t};\n\n\tthis.setTranslationSnap = function ( translationSnap ) {\n\n\t\tscope.translationSnap = translationSnap;\n\n\t};\n\n\tthis.setRotationSnap = function ( rotationSnap ) {\n\n\t\tscope.rotationSnap = rotationSnap;\n\n\t};\n\n\tthis.setScaleSnap = function ( scaleSnap ) {\n\n\t\tscope.scaleSnap = scaleSnap;\n\n\t};\n\n\tthis.setSize = function ( size ) {\n\n\t\tscope.size = size;\n\n\t};\n\n\tthis.setSpace = function ( space ) {\n\n\t\tscope.space = space;\n\n\t};\n\n\tthis.update = function () {\n\n\t\tconsole.warn( 'THREE.TransformControls: update function has no more functionality and therefore has been deprecated.' );\n\n\t};\n\n};\n\nTransformControls.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: TransformControls,\n\n\tisTransformControls: true\n\n} );\n\n\nvar TransformControlsGizmo = function () {\n\n\t'use strict';\n\n\tObject3D.call( this );\n\n\tthis.type = 'TransformControlsGizmo';\n\n\t// shared materials\n\n\tvar gizmoMaterial = new MeshBasicMaterial( {\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true,\n\t\tside: DoubleSide,\n\t\tfog: false,\n\t\ttoneMapped: false\n\t} );\n\n\tvar gizmoLineMaterial = new LineBasicMaterial( {\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true,\n\t\tlinewidth: 1,\n\t\tfog: false,\n\t\ttoneMapped: false\n\t} );\n\n\t// Make unique material for each axis/color\n\n\tvar matInvisible = gizmoMaterial.clone();\n\tmatInvisible.opacity = 0.15;\n\n\tvar matHelper = gizmoMaterial.clone();\n\tmatHelper.opacity = 0.33;\n\n\tvar matRed = gizmoMaterial.clone();\n\tmatRed.color.set( 0xff0000 );\n\n\tvar matGreen = gizmoMaterial.clone();\n\tmatGreen.color.set( 0x00ff00 );\n\n\tvar matBlue = gizmoMaterial.clone();\n\tmatBlue.color.set( 0x0000ff );\n\n\tvar matWhiteTransparent = gizmoMaterial.clone();\n\tmatWhiteTransparent.opacity = 0.25;\n\n\tvar matYellowTransparent = matWhiteTransparent.clone();\n\tmatYellowTransparent.color.set( 0xffff00 );\n\n\tvar matCyanTransparent = matWhiteTransparent.clone();\n\tmatCyanTransparent.color.set( 0x00ffff );\n\n\tvar matMagentaTransparent = matWhiteTransparent.clone();\n\tmatMagentaTransparent.color.set( 0xff00ff );\n\n\tvar matYellow = gizmoMaterial.clone();\n\tmatYellow.color.set( 0xffff00 );\n\n\tvar matLineRed = gizmoLineMaterial.clone();\n\tmatLineRed.color.set( 0xff0000 );\n\n\tvar matLineGreen = gizmoLineMaterial.clone();\n\tmatLineGreen.color.set( 0x00ff00 );\n\n\tvar matLineBlue = gizmoLineMaterial.clone();\n\tmatLineBlue.color.set( 0x0000ff );\n\n\tvar matLineCyan = gizmoLineMaterial.clone();\n\tmatLineCyan.color.set( 0x00ffff );\n\n\tvar matLineMagenta = gizmoLineMaterial.clone();\n\tmatLineMagenta.color.set( 0xff00ff );\n\n\tvar matLineYellow = gizmoLineMaterial.clone();\n\tmatLineYellow.color.set( 0xffff00 );\n\n\tvar matLineGray = gizmoLineMaterial.clone();\n\tmatLineGray.color.set( 0x787878 );\n\n\tvar matLineYellowTransparent = matLineYellow.clone();\n\tmatLineYellowTransparent.opacity = 0.25;\n\n\t// reusable geometry\n\n\tvar arrowGeometry = new CylinderBufferGeometry( 0, 0.05, 0.2, 12, 1, false );\n\n\tvar scaleHandleGeometry = new BoxBufferGeometry( 0.125, 0.125, 0.125 );\n\n\tvar lineGeometry = new BufferGeometry();\n\tlineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0,\t1, 0, 0 ], 3 ) );\n\n\tvar CircleGeometry = function ( radius, arc ) {\n\n\t\tvar geometry = new BufferGeometry( );\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i <= 64 * arc; ++ i ) {\n\n\t\t\tvertices.push( 0, Math.cos( i / 32 * Math.PI ) * radius, Math.sin( i / 32 * Math.PI ) * radius );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\treturn geometry;\n\n\t};\n\n\t// Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n\tvar TranslateHelperGeometry = function () {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 1, 1, 1 ], 3 ) );\n\n\t\treturn geometry;\n\n\t};\n\n\t// Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n\tvar gizmoTranslate = {\n\t\tX: [\n\t\t\t[ new Mesh( arrowGeometry, matRed ), [ 1, 0, 0 ], [ 0, 0, - Math.PI / 2 ], null, 'fwd' ],\n\t\t\t[ new Mesh( arrowGeometry, matRed ), [ 1, 0, 0 ], [ 0, 0, Math.PI / 2 ], null, 'bwd' ],\n\t\t\t[ new Line( lineGeometry, matLineRed ) ]\n\t\t],\n\t\tY: [\n\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, 1, 0 ], null, null, 'fwd' ],\n\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, 1, 0 ], [ Math.PI, 0, 0 ], null, 'bwd' ],\n\t\t\t[ new Line( lineGeometry, matLineGreen ), null, [ 0, 0, Math.PI / 2 ]]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 1 ], [ Math.PI / 2, 0, 0 ], null, 'fwd' ],\n\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 1 ], [ - Math.PI / 2, 0, 0 ], null, 'bwd' ],\n\t\t\t[ new Line( lineGeometry, matLineBlue ), null, [ 0, - Math.PI / 2, 0 ]]\n\t\t],\n\t\tXYZ: [\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.1, 0 ), matWhiteTransparent.clone() ), [ 0, 0, 0 ], [ 0, 0, 0 ]]\n\t\t],\n\t\tXY: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.295, 0.295 ), matYellowTransparent.clone() ), [ 0.15, 0.15, 0 ]],\n\t\t\t[ new Line( lineGeometry, matLineYellow ), [ 0.18, 0.3, 0 ], null, [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineYellow ), [ 0.3, 0.18, 0 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]]\n\t\t],\n\t\tYZ: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.295, 0.295 ), matCyanTransparent.clone() ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]],\n\t\t\t[ new Line( lineGeometry, matLineCyan ), [ 0, 0.18, 0.3 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineCyan ), [ 0, 0.3, 0.18 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]\n\t\t],\n\t\tXZ: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.295, 0.295 ), matMagentaTransparent.clone() ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t[ new Line( lineGeometry, matLineMagenta ), [ 0.18, 0, 0.3 ], null, [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineMagenta ), [ 0.3, 0, 0.18 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]\n\t\t]\n\t};\n\n\tvar pickerTranslate = {\n\t\tX: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 1, 4, 1, false ), matInvisible ), [ 0.6, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]\n\t\t],\n\t\tY: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 1, 4, 1, false ), matInvisible ), [ 0, 0.6, 0 ]]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 1, 4, 1, false ), matInvisible ), [ 0, 0, 0.6 ], [ Math.PI / 2, 0, 0 ]]\n\t\t],\n\t\tXYZ: [\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.2, 0 ), matInvisible ) ]\n\t\t],\n\t\tXY: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.4, 0.4 ), matInvisible ), [ 0.2, 0.2, 0 ]]\n\t\t],\n\t\tYZ: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.4, 0.4 ), matInvisible ), [ 0, 0.2, 0.2 ], [ 0, Math.PI / 2, 0 ]]\n\t\t],\n\t\tXZ: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.4, 0.4 ), matInvisible ), [ 0.2, 0, 0.2 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t]\n\t};\n\n\tvar helperTranslate = {\n\t\tSTART: [\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t],\n\t\tEND: [\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t],\n\t\tDELTA: [\n\t\t\t[ new Line( TranslateHelperGeometry(), matHelper ), null, null, null, 'helper' ]\n\t\t],\n\t\tX: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t],\n\t\tY: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t]\n\t};\n\n\tvar gizmoRotate = {\n\t\tX: [\n\t\t\t[ new Line( CircleGeometry( 1, 0.5 ), matLineRed ) ],\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.04, 0 ), matRed ), [ 0, 0, 0.99 ], null, [ 1, 3, 1 ]],\n\t\t],\n\t\tY: [\n\t\t\t[ new Line( CircleGeometry( 1, 0.5 ), matLineGreen ), null, [ 0, 0, - Math.PI / 2 ]],\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.04, 0 ), matGreen ), [ 0, 0, 0.99 ], null, [ 3, 1, 1 ]],\n\t\t],\n\t\tZ: [\n\t\t\t[ new Line( CircleGeometry( 1, 0.5 ), matLineBlue ), null, [ 0, Math.PI / 2, 0 ]],\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.04, 0 ), matBlue ), [ 0.99, 0, 0 ], null, [ 1, 3, 1 ]],\n\t\t],\n\t\tE: [\n\t\t\t[ new Line( CircleGeometry( 1.25, 1 ), matLineYellowTransparent ), null, [ 0, Math.PI / 2, 0 ]],\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ 1.17, 0, 0 ], [ 0, 0, - Math.PI / 2 ], [ 1, 1, 0.001 ]],\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ - 1.17, 0, 0 ], [ 0, 0, Math.PI / 2 ], [ 1, 1, 0.001 ]],\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ 0, - 1.17, 0 ], [ Math.PI, 0, 0 ], [ 1, 1, 0.001 ]],\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ 0, 1.17, 0 ], [ 0, 0, 0 ], [ 1, 1, 0.001 ]],\n\t\t],\n\t\tXYZE: [\n\t\t\t[ new Line( CircleGeometry( 1, 1 ), matLineGray ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t]\n\t};\n\n\tvar helperRotate = {\n\t\tAXIS: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t]\n\t};\n\n\tvar pickerRotate = {\n\t\tX: [\n\t\t\t[ new Mesh( new TorusBufferGeometry( 1, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, - Math.PI / 2, - Math.PI / 2 ]],\n\t\t],\n\t\tY: [\n\t\t\t[ new Mesh( new TorusBufferGeometry( 1, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t],\n\t\tZ: [\n\t\t\t[ new Mesh( new TorusBufferGeometry( 1, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t],\n\t\tE: [\n\t\t\t[ new Mesh( new TorusBufferGeometry( 1.25, 0.1, 2, 24 ), matInvisible ) ]\n\t\t],\n\t\tXYZE: [\n\t\t\t[ new Mesh( new SphereBufferGeometry( 0.7, 10, 8 ), matInvisible ) ]\n\t\t]\n\t};\n\n\tvar gizmoScale = {\n\t\tX: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ 0.8, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t[ new Line( lineGeometry, matLineRed ), null, null, [ 0.8, 1, 1 ]]\n\t\t],\n\t\tY: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, 0.8, 0 ]],\n\t\t\t[ new Line( lineGeometry, matLineGreen ), null, [ 0, 0, Math.PI / 2 ], [ 0.8, 1, 1 ]]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, 0.8 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t[ new Line( lineGeometry, matLineBlue ), null, [ 0, - Math.PI / 2, 0 ], [ 0.8, 1, 1 ]]\n\t\t],\n\t\tXY: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matYellowTransparent ), [ 0.85, 0.85, 0 ], null, [ 2, 2, 0.2 ]],\n\t\t\t[ new Line( lineGeometry, matLineYellow ), [ 0.855, 0.98, 0 ], null, [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineYellow ), [ 0.98, 0.855, 0 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]]\n\t\t],\n\t\tYZ: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matCyanTransparent ), [ 0, 0.85, 0.85 ], null, [ 0.2, 2, 2 ]],\n\t\t\t[ new Line( lineGeometry, matLineCyan ), [ 0, 0.855, 0.98 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineCyan ), [ 0, 0.98, 0.855 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]\n\t\t],\n\t\tXZ: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matMagentaTransparent ), [ 0.85, 0, 0.85 ], null, [ 2, 0.2, 2 ]],\n\t\t\t[ new Line( lineGeometry, matLineMagenta ), [ 0.855, 0, 0.98 ], null, [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineMagenta ), [ 0.98, 0, 0.855 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]\n\t\t],\n\t\tXYZX: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.125, 0.125, 0.125 ), matWhiteTransparent.clone() ), [ 1.1, 0, 0 ]],\n\t\t],\n\t\tXYZY: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.125, 0.125, 0.125 ), matWhiteTransparent.clone() ), [ 0, 1.1, 0 ]],\n\t\t],\n\t\tXYZZ: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.125, 0.125, 0.125 ), matWhiteTransparent.clone() ), [ 0, 0, 1.1 ]],\n\t\t]\n\t};\n\n\tvar pickerScale = {\n\t\tX: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 0.8, 4, 1, false ), matInvisible ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]\n\t\t],\n\t\tY: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 0.8, 4, 1, false ), matInvisible ), [ 0, 0.5, 0 ]]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 0.8, 4, 1, false ), matInvisible ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]]\n\t\t],\n\t\tXY: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matInvisible ), [ 0.85, 0.85, 0 ], null, [ 3, 3, 0.2 ]],\n\t\t],\n\t\tYZ: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matInvisible ), [ 0, 0.85, 0.85 ], null, [ 0.2, 3, 3 ]],\n\t\t],\n\t\tXZ: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matInvisible ), [ 0.85, 0, 0.85 ], null, [ 3, 0.2, 3 ]],\n\t\t],\n\t\tXYZX: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 1.1, 0, 0 ]],\n\t\t],\n\t\tXYZY: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 1.1, 0 ]],\n\t\t],\n\t\tXYZZ: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 0, 1.1 ]],\n\t\t]\n\t};\n\n\tvar helperScale = {\n\t\tX: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t],\n\t\tY: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t]\n\t};\n\n\t// Creates an Object3D with gizmos described in custom hierarchy definition.\n\n\tvar setupGizmo = function ( gizmoMap ) {\n\n\t\tvar gizmo = new Object3D();\n\n\t\tfor ( var name in gizmoMap ) {\n\n\t\t\tfor ( var i = gizmoMap[ name ].length; i --; ) {\n\n\t\t\t\tvar object = gizmoMap[ name ][ i ][ 0 ].clone();\n\t\t\t\tvar position = gizmoMap[ name ][ i ][ 1 ];\n\t\t\t\tvar rotation = gizmoMap[ name ][ i ][ 2 ];\n\t\t\t\tvar scale = gizmoMap[ name ][ i ][ 3 ];\n\t\t\t\tvar tag = gizmoMap[ name ][ i ][ 4 ];\n\n\t\t\t\t// name and tag properties are essential for picking and updating logic.\n\t\t\t\tobject.name = name;\n\t\t\t\tobject.tag = tag;\n\n\t\t\t\tif ( position ) {\n\n\t\t\t\t\tobject.position.set( position[ 0 ], position[ 1 ], position[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rotation ) {\n\n\t\t\t\t\tobject.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scale ) {\n\n\t\t\t\t\tobject.scale.set( scale[ 0 ], scale[ 1 ], scale[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tobject.updateMatrix();\n\n\t\t\t\tvar tempGeometry = object.geometry.clone();\n\t\t\t\ttempGeometry.applyMatrix4( object.matrix );\n\t\t\t\tobject.geometry = tempGeometry;\n\t\t\t\tobject.renderOrder = Infinity;\n\n\t\t\t\tobject.position.set( 0, 0, 0 );\n\t\t\t\tobject.rotation.set( 0, 0, 0 );\n\t\t\t\tobject.scale.set( 1, 1, 1 );\n\n\t\t\t\tgizmo.add( object );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn gizmo;\n\n\t};\n\n\t// Reusable utility variables\n\n\tvar tempVector = new Vector3( 0, 0, 0 );\n\tvar tempEuler = new Euler();\n\tvar alignVector = new Vector3( 0, 1, 0 );\n\tvar zeroVector = new Vector3( 0, 0, 0 );\n\tvar lookAtMatrix = new Matrix4();\n\tvar tempQuaternion = new Quaternion();\n\tvar tempQuaternion2 = new Quaternion();\n\tvar identityQuaternion = new Quaternion();\n\n\tvar unitX = new Vector3( 1, 0, 0 );\n\tvar unitY = new Vector3( 0, 1, 0 );\n\tvar unitZ = new Vector3( 0, 0, 1 );\n\n\t// Gizmo creation\n\n\tthis.gizmo = {};\n\tthis.picker = {};\n\tthis.helper = {};\n\n\tthis.add( this.gizmo[ \"translate\" ] = setupGizmo( gizmoTranslate ) );\n\tthis.add( this.gizmo[ \"rotate\" ] = setupGizmo( gizmoRotate ) );\n\tthis.add( this.gizmo[ \"scale\" ] = setupGizmo( gizmoScale ) );\n\tthis.add( this.picker[ \"translate\" ] = setupGizmo( pickerTranslate ) );\n\tthis.add( this.picker[ \"rotate\" ] = setupGizmo( pickerRotate ) );\n\tthis.add( this.picker[ \"scale\" ] = setupGizmo( pickerScale ) );\n\tthis.add( this.helper[ \"translate\" ] = setupGizmo( helperTranslate ) );\n\tthis.add( this.helper[ \"rotate\" ] = setupGizmo( helperRotate ) );\n\tthis.add( this.helper[ \"scale\" ] = setupGizmo( helperScale ) );\n\n\t// Pickers should be hidden always\n\n\tthis.picker[ \"translate\" ].visible = false;\n\tthis.picker[ \"rotate\" ].visible = false;\n\tthis.picker[ \"scale\" ].visible = false;\n\n\t// updateMatrixWorld will update transformations and appearance of individual handles\n\n\tthis.updateMatrixWorld = function () {\n\n\t\tvar space = this.space;\n\n\t\tif ( this.mode === 'scale' ) space = 'local'; // scale always oriented to local rotation\n\n\t\tvar quaternion = space === \"local\" ? this.worldQuaternion : identityQuaternion;\n\n\t\t// Show only gizmos for current transform mode\n\n\t\tthis.gizmo[ \"translate\" ].visible = this.mode === \"translate\";\n\t\tthis.gizmo[ \"rotate\" ].visible = this.mode === \"rotate\";\n\t\tthis.gizmo[ \"scale\" ].visible = this.mode === \"scale\";\n\n\t\tthis.helper[ \"translate\" ].visible = this.mode === \"translate\";\n\t\tthis.helper[ \"rotate\" ].visible = this.mode === \"rotate\";\n\t\tthis.helper[ \"scale\" ].visible = this.mode === \"scale\";\n\n\n\t\tvar handles = [];\n\t\thandles = handles.concat( this.picker[ this.mode ].children );\n\t\thandles = handles.concat( this.gizmo[ this.mode ].children );\n\t\thandles = handles.concat( this.helper[ this.mode ].children );\n\n\t\tfor ( var i = 0; i < handles.length; i ++ ) {\n\n\t\t\tvar handle = handles[ i ];\n\n\t\t\t// hide aligned to camera\n\n\t\t\thandle.visible = true;\n\t\t\thandle.rotation.set( 0, 0, 0 );\n\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\tvar factor;\n\n\t\t\tif ( this.camera.isOrthographicCamera ) {\n\n\t\t\t\tfactor = ( this.camera.top - this.camera.bottom ) / this.camera.zoom;\n\n\t\t\t} else {\n\n\t\t\t\tfactor = this.worldPosition.distanceTo( this.cameraPosition ) * Math.min( 1.9 * Math.tan( Math.PI * this.camera.fov / 360 ) / this.camera.zoom, 7 );\n\n\t\t\t}\n\n\t\t\thandle.scale.set( 1, 1, 1 ).multiplyScalar( factor * this.size / 7 );\n\n\t\t\t// TODO: simplify helpers and consider decoupling from gizmo\n\n\t\t\tif ( handle.tag === 'helper' ) {\n\n\t\t\t\thandle.visible = false;\n\n\t\t\t\tif ( handle.name === 'AXIS' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = !! this.axis;\n\n\t\t\t\t\tif ( this.axis === 'X' ) {\n\n\t\t\t\t\t\ttempQuaternion.setFromEuler( tempEuler.set( 0, 0, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Y' ) {\n\n\t\t\t\t\t\ttempQuaternion.setFromEuler( tempEuler.set( 0, 0, Math.PI / 2 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Z' ) {\n\n\t\t\t\t\t\ttempQuaternion.setFromEuler( tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'XYZE' ) {\n\n\t\t\t\t\t\ttempQuaternion.setFromEuler( tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\talignVector.copy( this.rotationAxis );\n\t\t\t\t\t\thandle.quaternion.setFromRotationMatrix( lookAtMatrix.lookAt( zeroVector, alignVector, unitY ) );\n\t\t\t\t\t\thandle.quaternion.multiply( tempQuaternion );\n\t\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'E' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else if ( handle.name === 'START' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'END' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPosition );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'DELTA' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.quaternion.copy( this.worldQuaternionStart );\n\t\t\t\t\ttempVector.set( 1e-10, 1e-10, 1e-10 ).add( this.worldPositionStart ).sub( this.worldPosition ).multiplyScalar( - 1 );\n\t\t\t\t\ttempVector.applyQuaternion( this.worldQuaternionStart.clone().inverse() );\n\t\t\t\t\thandle.scale.copy( tempVector );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\t\t\tif ( this.dragging ) {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis ) {\n\n\t\t\t\t\t\thandle.visible = this.axis.search( handle.name ) !== - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// If updating helper, skip rest of the loop\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// Align handles to current local or world rotation\n\n\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\tif ( this.mode === 'translate' || this.mode === 'scale' ) {\n\n\t\t\t\t// Hide translate and scale axis facing the camera\n\n\t\t\t\tvar AXIS_HIDE_TRESHOLD = 0.99;\n\t\t\t\tvar PLANE_HIDE_TRESHOLD = 0.2;\n\t\t\t\tvar AXIS_FLIP_TRESHOLD = 0.0;\n\n\n\t\t\t\tif ( handle.name === 'X' || handle.name === 'XYZX' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' || handle.name === 'XYZY' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' || handle.name === 'XYZZ' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XY' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'YZ' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XZ' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Flip translate and scale axis ocluded behind another axis\n\n\t\t\t\tif ( handle.name.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\tif ( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) < AXIS_FLIP_TRESHOLD ) {\n\n\t\t\t\t\t\tif ( handle.tag === 'fwd' ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\thandle.scale.x *= - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( handle.tag === 'bwd' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\tif ( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) < AXIS_FLIP_TRESHOLD ) {\n\n\t\t\t\t\t\tif ( handle.tag === 'fwd' ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\thandle.scale.y *= - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( handle.tag === 'bwd' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\tif ( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) < AXIS_FLIP_TRESHOLD ) {\n\n\t\t\t\t\t\tif ( handle.tag === 'fwd' ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\thandle.scale.z *= - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( handle.tag === 'bwd' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.mode === 'rotate' ) {\n\n\t\t\t\t// Align handles to current local or world rotation\n\n\t\t\t\ttempQuaternion2.copy( quaternion );\n\t\t\t\talignVector.copy( this.eye ).applyQuaternion( tempQuaternion.copy( quaternion ).inverse() );\n\n\t\t\t\tif ( handle.name.search( \"E\" ) !== - 1 ) {\n\n\t\t\t\t\thandle.quaternion.setFromRotationMatrix( lookAtMatrix.lookAt( this.eye, zeroVector, unitY ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\ttempQuaternion.setFromAxisAngle( unitX, Math.atan2( - alignVector.y, alignVector.z ) );\n\t\t\t\t\ttempQuaternion.multiplyQuaternions( tempQuaternion2, tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\ttempQuaternion.setFromAxisAngle( unitY, Math.atan2( alignVector.x, alignVector.z ) );\n\t\t\t\t\ttempQuaternion.multiplyQuaternions( tempQuaternion2, tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\ttempQuaternion.setFromAxisAngle( unitZ, Math.atan2( alignVector.y, alignVector.x ) );\n\t\t\t\t\ttempQuaternion.multiplyQuaternions( tempQuaternion2, tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Hide disabled axes\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( \"X\" ) === - 1 || this.showX );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( \"Y\" ) === - 1 || this.showY );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( \"Z\" ) === - 1 || this.showZ );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( \"E\" ) === - 1 || ( this.showX && this.showY && this.showZ ) );\n\n\t\t\t// highlight selected axis\n\n\t\t\thandle.material._opacity = handle.material._opacity || handle.material.opacity;\n\t\t\thandle.material._color = handle.material._color || handle.material.color.clone();\n\n\t\t\thandle.material.color.copy( handle.material._color );\n\t\t\thandle.material.opacity = handle.material._opacity;\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\thandle.material.opacity *= 0.5;\n\t\t\t\thandle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );\n\n\t\t\t} else if ( this.axis ) {\n\n\t\t\t\tif ( handle.name === this.axis ) {\n\n\t\t\t\t\thandle.material.opacity = 1.0;\n\t\t\t\t\thandle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );\n\n\t\t\t\t} else if ( this.axis.split( '' ).some( function ( a ) {\n\n\t\t\t\t\treturn handle.name === a;\n\n\t\t\t\t} ) ) {\n\n\t\t\t\t\thandle.material.opacity = 1.0;\n\t\t\t\t\thandle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\thandle.material.opacity *= 0.25;\n\t\t\t\t\thandle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this );\n\n\t};\n\n};\n\nTransformControlsGizmo.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: TransformControlsGizmo,\n\n\tisTransformControlsGizmo: true\n\n} );\n\n\nvar TransformControlsPlane = function () {\n\n\t'use strict';\n\n\tMesh.call( this,\n\t\tnew PlaneBufferGeometry( 100000, 100000, 2, 2 ),\n\t\tnew MeshBasicMaterial( { visible: false, wireframe: true, side: DoubleSide, transparent: true, opacity: 0.1, toneMapped: false } )\n\t);\n\n\tthis.type = 'TransformControlsPlane';\n\n\tvar unitX = new Vector3( 1, 0, 0 );\n\tvar unitY = new Vector3( 0, 1, 0 );\n\tvar unitZ = new Vector3( 0, 0, 1 );\n\n\tvar tempVector = new Vector3();\n\tvar dirVector = new Vector3();\n\tvar alignVector = new Vector3();\n\tvar tempMatrix = new Matrix4();\n\tvar identityQuaternion = new Quaternion();\n\n\tthis.updateMatrixWorld = function () {\n\n\t\tvar space = this.space;\n\n\t\tthis.position.copy( this.worldPosition );\n\n\t\tif ( this.mode === 'scale' ) space = 'local'; // scale always oriented to local rotation\n\n\t\tunitX.set( 1, 0, 0 ).applyQuaternion( space === \"local\" ? this.worldQuaternion : identityQuaternion );\n\t\tunitY.set( 0, 1, 0 ).applyQuaternion( space === \"local\" ? this.worldQuaternion : identityQuaternion );\n\t\tunitZ.set( 0, 0, 1 ).applyQuaternion( space === \"local\" ? this.worldQuaternion : identityQuaternion );\n\n\t\t// Align the plane for current transform mode, axis and space.\n\n\t\talignVector.copy( unitY );\n\n\t\tswitch ( this.mode ) {\n\n\t\t\tcase 'translate':\n\t\t\tcase 'scale':\n\t\t\t\tswitch ( this.axis ) {\n\n\t\t\t\t\tcase 'X':\n\t\t\t\t\t\talignVector.copy( this.eye ).cross( unitX );\n\t\t\t\t\t\tdirVector.copy( unitX ).cross( alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\t\talignVector.copy( this.eye ).cross( unitY );\n\t\t\t\t\t\tdirVector.copy( unitY ).cross( alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Z':\n\t\t\t\t\t\talignVector.copy( this.eye ).cross( unitZ );\n\t\t\t\t\t\tdirVector.copy( unitZ ).cross( alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XY':\n\t\t\t\t\t\tdirVector.copy( unitZ );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YZ':\n\t\t\t\t\t\tdirVector.copy( unitX );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XZ':\n\t\t\t\t\t\talignVector.copy( unitZ );\n\t\t\t\t\t\tdirVector.copy( unitY );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XYZ':\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\tdirVector.set( 0, 0, 0 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'rotate':\n\t\t\tdefault:\n\t\t\t\t// special case for rotate\n\t\t\t\tdirVector.set( 0, 0, 0 );\n\n\t\t}\n\n\t\tif ( dirVector.length() === 0 ) {\n\n\t\t\t// If in rotate mode, make the plane parallel to camera\n\t\t\tthis.quaternion.copy( this.cameraQuaternion );\n\n\t\t} else {\n\n\t\t\ttempMatrix.lookAt( tempVector.set( 0, 0, 0 ), dirVector, alignVector );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( tempMatrix );\n\n\t\t}\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this );\n\n\t};\n\n};\n\nTransformControlsPlane.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\tconstructor: TransformControlsPlane,\n\n\tisTransformControlsPlane: true\n\n} );\n\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };\n","import { RawShaderMaterial } from 'three'\nimport * as THREE from 'three'\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls.js'\nimport * as dat from 'dat.gui'\n\nexport const glsl = (v, ...args) => {\n  let str = ''\n  v.forEach((e, i) => {\n    str += e + (args[i] || '')\n  })\n  return str\n}\n\nexport class Curves {\n  constructor ({ ctx, runEditor = true }) {\n    // ctx.item\n\n    let dimension = 3\n    let size = 10\n    let count = Math.pow(size, dimension)\n    // let sizeX = size\n    // let sizeY = size\n    // let sizeZ = size\n\n    let numSides = 5\n    let subdivisions = 200\n    let openEnded = false\n\n    // let simulator = new PositionSimulation({ ctx, sizeX, sizeY })\n    // this.simulator = simulator\n\n    let geo = new LineGeo({ count, numSides, subdivisions, openEnded, dimension })\n\n    // let geo = new BoxBufferGeometry(0.9, 2, 2, 500, 1, 1)//;\n\n    let controlPoints = [new THREE.Vector3(-153.4197541332805, 602.2842649103882, 359.418400289163),\n      new THREE.Vector3(-392.0363395266815, 570.4566516367261, -73.45548420131888),\n      new THREE.Vector3(186.94941449888915, 560.3151130695674, -437.2747381058281),\n      new THREE.Vector3(681.5478987247174, 102.66487050746449, -549.0420662782607),\n      new THREE.Vector3(679.1265410036509, 317.9163259626413, 125.20635116261195),\n      new THREE.Vector3(320.42945622005925, -1.4501254737023075, 715.1495822876569),\n      new THREE.Vector3(-408.91078659800064, 221.57512686921615, 585.4569096178118),\n      new THREE.Vector3(-592.084540628733, 124.02196204099367, -143.6297593666219)]\n\n    // controlPoints.forEach(e => {\n    //   e.multiplyScalar(100.0)\n    // })\n\n    let getRollGLSL = ({ name = 'CONTROL_POINTS', pts = [] }) => {\n      let ifthenelse = ``\n\n      // let intval = `${Number(pts.length).toFixed(0)}`\n      let floatval = `${Number(pts.length).toFixed(1)}`\n\n      pts.forEach((val, idx) => {\n        ifthenelse += `\n        else if (index == ${idx.toFixed(1)}) {\n          result = vec3( ${Number(val.x).toFixed(7)}, ${Number(val.y).toFixed(7)}, ${Number(val.z).toFixed(7)} );\n        }\n        `\n      })\n\n      let res =  `\n      vec3 pointIDX_${name} (float index) {\n        vec3 result = vec3(0.0);\n\n        if (false) {\n        } ${ifthenelse}\n\n        return result;\n      }\n\n      vec3 catmullRom (vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t) {\n          vec3 v0 = (p2 - p0) * 0.5;\n          vec3 v1 = (p3 - p1) * 0.5;\n          float t2 = t * t;\n          float t3 = t * t * t;\n\n          return vec3((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\n      }\n\n      vec3 getPointAt (float t) {\n        bool closed = false;\n        float ll = ${floatval};\n        float minusOne = 1.0;\n        if (closed) {\n          minusOne = 0.0;\n        }\n\n        float p = (ll - minusOne) * t;\n        float intPoint = floor(p);\n        float weight = p - intPoint;\n\n        float idx0 = intPoint - 1.0;\n        float idx1 = intPoint + 0.0;\n        float idx2 = intPoint + 1.0;\n        float idx3 = intPoint + 2.0;\n\n        vec3 pt0 = pointIDX_${name}(idx0);\n        vec3 pt1 = pointIDX_${name}(idx1);\n        vec3 pt2 = pointIDX_${name}(idx2);\n        vec3 pt3 = pointIDX_${name}(idx3);\n\n        vec3 pointoutput = catmullRom(pt0, pt1, pt2, pt3, weight);\n\n        return pointoutput;\n      }\n      `\n      // console.log(res);\n      return res\n    }\n\n    let makeTubeGLSL = () => {\n      let item = `\n\n      attribute float position;\n      attribute float angle;\n      attribute vec2 uv;\n      attribute vec3 offset;\n      attribute vec2 reader;\n\n      const mat2 m = mat2(0.80,  0.60, -0.60,  0.80);\n\n      float noise(in vec2 p) {\n        return sin(p.x)*sin(p.y);\n      }\n\n      float fbm4( vec2 p ) {\n          float f = 0.0;\n          f += 0.5000 * noise( p ); p = m * p * 2.02;\n          f += 0.2500 * noise( p ); p = m * p * 2.03;\n          f += 0.1250 * noise( p ); p = m * p * 2.01;\n          f += 0.0625 * noise( p );\n          return f / 0.9375;\n      }\n\n      float fbm6( vec2 p ) {\n          float f = 0.0;\n          f += 0.500000*(0.5+0.5*noise( p )); p = m*p*2.02;\n          f += 0.250000*(0.5+0.5*noise( p )); p = m*p*2.03;\n          f += 0.125000*(0.5+0.5*noise( p )); p = m*p*2.01;\n          f += 0.062500*(0.5+0.5*noise( p )); p = m*p*2.04;\n          f += 0.031250*(0.5+0.5*noise( p )); p = m*p*2.01;\n          f += 0.015625*(0.5+0.5*noise( p ));\n          return f/0.96875;\n      }\n\n      float pattern (vec2 p, float time) {\n        float vout = fbm4( p + time + fbm6( p + fbm4( p + time )) );\n        return (vout);\n      }\n\n      mat3 calcLookAtMatrix (vec3 origin, vec3 target, float roll) {\n        vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n        vec3 ww = normalize(target - origin);\n        vec3 uu = normalize(cross(ww, rr));\n        vec3 vv = normalize(cross(uu, ww));\n\n        return mat3(uu, vv, ww);\n      }\n\n      // dough nut\n      // vec3 sample (float t) {\n      //   float angle = t * 2.0 * PI;\n      //   vec2 rot = vec2(cos(angle), sin(angle));\n      //   return vec3(rot, 0.0) * 10.0;\n      // }\n\n      float rand (vec2 co){\n        return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n      }\n\n      float getLooper (float t) {\n        return mod(t * 0.1 + time * 0.5 * rand(vec2(reader.x, reader.x - 0.1)), 1.0);\n      }\n\n\n      // line\n      vec3 sample (float t) {\n        float nextT = t + (1.0 / lengthSegments);\n        float looper = getLooper(t);\n        vec3 coord = getPointAt(looper);\n\n        coord += coord * 0.3 * (rand(vec2(reader.x, reader.x - 0.01)) * 2.0 - 1.0);\n        return coord;\n      }\n\n      void createTube (float t, vec2 volume, out vec3 pos, out vec3 normal) {\n        // find next sample along curve\n        float nextT = t + (1.0 / lengthSegments);\n\n        // sample the curve in two places\n        vec3 cur = sample(t);\n        vec3 next = sample(nextT);\n\n        // compute the Frenet-Serret frame\n        vec3 T = normalize(next - cur);\n        vec3 B = normalize(cross(T, next + cur));\n        vec3 N = -normalize(cross(B, T));\n\n        // extrude outward to create a tube\n        float tubeAngle = angle;\n        float circX = cos(tubeAngle);\n        float circY = sin(tubeAngle);\n\n        // compute position and normal\n        normal.xyz = normalize(B * circX + N * circY);\n        pos.xyz = cur + B * volume.x * circX + N * volume.y * circY;\n      }\n\n      vec3 makeGeo () {\n        float thickness = 20.0;\n        float t = (position * 2.0) * 0.5 + 0.5;\n\n        vec2 volume = vec2(thickness / 10.0);\n        vec3 transformed;\n        vec3 objectNormal;\n        createTube(t, volume, transformed, objectNormal);\n\n        // vec3 transformedNormal = normalMatrix * objectNormal;\n\n        return transformed;\n      }\n      `\n\n      return item\n    }\n\n    let makeGLSLVertex = () => {\n      return `\n        precision highp float;\n        #define PI 3.1415926535897932384626433832795\n        uniform mat4 projectionMatrix;\n        uniform mat4 modelViewMatrix;\n        uniform mat3 normalMatrix;\n\n        // uniforms\n        uniform float time;\n\n        ${getRollGLSL({ name: 'CONTROL_POINTS', pts: controlPoints })}\n\n        ${makeTubeGLSL()}\n\n        void main (void) {\n          vec3 nPos = makeGeo();\n\n          // nPos = nPos + 30.0 * normalize(nPos) * (rand(offset.xz + 20.0 * time) * 2.0 - 1.0);\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(nPos, 1.0);\n\n          float t = (position * 2.0) * 0.5 + 0.5;\n          float looper = getLooper(t);\n\n          if (!(looper >= 0.01 && looper <= 0.99)) {\n            gl_Position.w = 0.0;\n          }\n        }\n      `\n    }\n\n    let getMat = () => {\n      return new RawShaderMaterial({\n        uniforms: {\n          time: { value: 0 },\n          controlPoints: { value: controlPoints }\n        },\n        vertexShader: makeGLSLVertex(),\n        fragmentShader: `\n          void main (void) {\n            gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);\n          }\n        `,\n        defines: {\n          lengthSegments: subdivisions.toFixed(1)\n        }\n      })\n    }\n\n    ctx.onLoop(() => {\n      let time = window.performance.now() * 0.001\n      lanCurve.material.uniforms.time.value = time\n\n      geo.instanceCount = Math.floor(100 / 100.0 * count);\n    })\n\n    let lanCurve = new THREE.Mesh(geo, getMat(), count)\n    lanCurve.frustumCulled = false\n    lanCurve.userData.bloom = true\n    // lanCurve.scale.set(1.0, 1.0, 1.0);\n    ctx.scene.add(lanCurve)\n\n    if (runEditor) {\n      let getArr = () => {\n        return controlPoints\n      }\n      let tout = 0\n      let setArr = (v) => {\n        controlPoints = v\n        clearTimeout(tout)\n        tout = setTimeout(() => {\n          lanCurve.material = getMat()\n        }, 150)\n      }\n\n      new Editor({ ctx, getArr, setArr })\n    }\n  }\n}\n\nclass Editor {\n  constructor ({ ctx, getArr, setArr }) {\n    const splineHelperObjects = [];\n\n      let splinePointsLength = 4;\n\t\t\tconst positions = [];\n\t\t\tconst point = new THREE.Vector3();\n\n\t\t\tconst raycaster = new THREE.Raycaster();\n\t\t\tconst pointer = new THREE.Vector2();\n\t\t\tconst onUpPosition = new THREE.Vector2();\n\t\t\tconst onDownPosition = new THREE.Vector2();\n\n\t\t\tconst geometry = new THREE.SphereBufferGeometry(23,  32,  32);\n\t\t\tlet transformControl;\n\n\t\t\tconst ARC_SEGMENTS = 200;\n\n\t\t\tconst splines = {};\n\n\t\t\tconst params = {\n\t\t\t\tuniform: true,\n\t\t\t\ttension: 0.5,\n\t\t\t\tcentripetal: false,\n\t\t\t\tchordal: false,\n\t\t\t\taddPoint: addPoint,\n\t\t\t\tremovePoint: removePoint,\n\t\t\t\texportSpline: exportSpline\n      };\n\n\t\t\tinit();\n\t\t\tanimate();\n      let scene, camera, renderer\n\t\t\tfunction init() {\n\t\t\t\tscene = ctx.scene;\n\t\t\t\t// scene.background = new THREE.Color( 0xf0f0f0 );\n\n\t\t\t\tcamera = ctx.camera;\n\t\t\t\tcamera.position.set( 0, 250, 1000 );\n\t\t\t\tscene.add( camera );\n\n\t\t\t\tscene.add( new THREE.AmbientLight( 0xf0f0f0 ) );\n\t\t\t\tconst light = new THREE.SpotLight( 0xffffff, 1.5 );\n\t\t\t\tlight.position.set( 0, 1500, 200 );\n\t\t\t\tlight.angle = Math.PI * 0.2;\n\t\t\t\tlight.castShadow = true;\n\t\t\t\tlight.shadow.camera.near = 200;\n\t\t\t\tlight.shadow.camera.far = 2000;\n\t\t\t\tlight.shadow.bias = - 0.000222;\n\t\t\t\tlight.shadow.mapSize.width = 1024;\n\t\t\t\tlight.shadow.mapSize.height = 1024;\n\t\t\t\tscene.add( light );\n\n\t\t\t\tconst planeGeometry = new THREE.PlaneBufferGeometry( 2000, 2000 );\n\t\t\t\tplaneGeometry.rotateX( - Math.PI / 2 );\n\t\t\t\tconst planeMaterial = new THREE.ShadowMaterial( { opacity: 0.2 } );\n\n\t\t\t\tconst plane = new THREE.Mesh( planeGeometry, planeMaterial );\n\t\t\t\tplane.position.y = - 200;\n\t\t\t\tplane.receiveShadow = true;\n\t\t\t\tscene.add( plane );\n\n\t\t\t\tconst helper = new THREE.GridHelper( 2000, 100 );\n\t\t\t\thelper.position.y = - 199;\n\t\t\t\thelper.material.opacity = 0.25;\n\t\t\t\thelper.material.transparent = true;\n\t\t\t\tscene.add( helper );\n\n\t\t\t\trenderer = ctx.renderer;\n\t\t\t\trenderer.setPixelRatio( window.devicePixelRatio );\n\t\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\t\t\trenderer.shadowMap.enabled = true;\n\n        const getgui = () => new dat.GUI();\n        if (window.gui) {\n          window.gui.destroy()\n        }\n        let gui = getgui()\n        window.gui = gui\n        console.log(gui)\n        // gui.add( params, 'uniform' );\n\t\t\t\t// gui.add( params, 'tension', 0, 1 ).step( 0.01 ).onChange( function ( value ) {\n\t\t\t\t// \tsplines.uniform.tension = value;\n\t\t\t\t// \tupdateSplineOutline();\n        // } );\n\t\t\t\t// gui.add( params, 'centripetal' );\n        // gui.add( params, 'chordal' );\n\n\t\t\t\tgui.add( params, 'addPoint' );\n\t\t\t\tgui.add( params, 'removePoint' );\n\t\t\t\tgui.add( params, 'exportSpline' );\n\t\t\t\tgui.open();\n\n        // Controls\n        let OrbitControls = require('three/examples/jsm/controls/OrbitControls').OrbitControls\n        ctx.root.controls = new OrbitControls(ctx.root.camera, ctx.el)\n\t\t\t\tconst controls = ctx.controls;\n\t\t\t\tcontrols.damping = 0.2;\n\t\t\t\tcontrols.addEventListener( 'change', render );\n\n\t\t\t\ttransformControl = new TransformControls( camera, renderer.domElement );\n\t\t\t\ttransformControl.addEventListener( 'change', render );\n\t\t\t\ttransformControl.addEventListener( 'dragging-changed', function ( event ) {\n\n\t\t\t\t\tcontrols.enabled = ! event.value;\n\n\t\t\t\t} );\n\t\t\t\tscene.add( transformControl );\n\n\t\t\t\ttransformControl.addEventListener( 'objectChange', function () {\n\n\t\t\t\t\tupdateSplineOutline();\n\n\t\t\t\t} );\n\n\t\t\t\tdocument.addEventListener( 'pointerdown', onPointerDown, false );\n\t\t\t\tdocument.addEventListener( 'pointerup', onPointerUp, false );\n\t\t\t\tdocument.addEventListener( 'pointermove', onPointerMove, false );\n\n\t\t\t\t/*******\n\t\t\t\t * Curves\n\t\t\t\t *********/\n\n\t\t\t\tfor ( let i = 0; i < splinePointsLength; i ++ ) {\n\n\t\t\t\t\taddSplineObject( positions[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tpositions.length = 0;\n\n\t\t\t\tfor ( let i = 0; i < splinePointsLength; i ++ ) {\n\n\t\t\t\t\tpositions.push( splineHelperObjects[ i ].position );\n\n\t\t\t\t}\n\n\t\t\t\tconst geometry = new THREE.BufferGeometry();\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array( ARC_SEGMENTS * 3 ), 3 ) );\n\n\t\t\t\tlet curve = new THREE.CatmullRomCurve3( positions );\n\t\t\t\tcurve.curveType = 'catmullrom';\n\t\t\t\tcurve.mesh = new THREE.Line( geometry.clone(), new THREE.LineBasicMaterial( {\n\t\t\t\t\tcolor: 0xff0000,\n\t\t\t\t\topacity: 0.35\n\t\t\t\t} ) );\n\t\t\t\tcurve.mesh.castShadow = true;\n        splines.uniform = curve;\n\n        //\n\n\t\t\t\t// curve = new THREE.CatmullRomCurve3( positions );\n\t\t\t\t// curve.curveType = 'centripetal';\n\t\t\t\t// curve.mesh = new THREE.Line( geometry.clone(), new THREE.LineBasicMaterial( {\n\t\t\t\t// \tcolor: 0x00ff00,\n\t\t\t\t// \topacity: 0.35\n\t\t\t\t// } ) );\n\t\t\t\t// curve.mesh.castShadow = true;\n\t\t\t\t// splines.centripetal = curve;\n\n\t\t\t\t// curve = new THREE.CatmullRomCurve3( positions );\n\t\t\t\t// curve.curveType = 'chordal';\n\t\t\t\t// curve.mesh = new THREE.Line( geometry.clone(), new THREE.LineBasicMaterial( {\n\t\t\t\t// \tcolor: 0x0000ff,\n\t\t\t\t// \topacity: 0.35\n\t\t\t\t// } ) );\n\t\t\t\t// curve.mesh.castShadow = true;\n\t\t\t\t// splines.chordal = curve;\n\n\t\t\t\tfor ( const k in splines ) {\n\n\t\t\t\t\tconst spline = splines[ k ];\n\t\t\t\t\tscene.add( spline.mesh );\n\n\t\t\t\t}\n\n\t\t\t\t// load( [ new THREE.Vector3( 289.76843686945404, 452.51481137238443, 56.10018915737797 ),\n\t\t\t\t// \tnew THREE.Vector3( - 53.56300074753207, 171.49711742836848, - 14.495472686253045 ),\n\t\t\t\t// \tnew THREE.Vector3( - 91.40118730204415, 176.4306956436485, - 6.958271935582161 ),\n        // \tnew THREE.Vector3( - 383.785318791128, 491.1365363371675, 47.869296953772746 ) ] );\n\n        load(getArr());\n\t\t\t}\n\n\t\t\tfunction addSplineObject( position ) {\n\n\t\t\t\tconst material = new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } );\n\t\t\t\tconst object = new THREE.Mesh( geometry, material );\n\n\t\t\t\tif ( position ) {\n\n\t\t\t\t\tobject.position.copy( position );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.position.x = Math.random() * 1000 - 500;\n\t\t\t\t\tobject.position.y = Math.random() * 600;\n\t\t\t\t\tobject.position.z = Math.random() * 800 - 400;\n\n\t\t\t\t}\n\n\t\t\t\tobject.castShadow = true;\n\t\t\t\tobject.receiveShadow = true;\n\t\t\t\tscene.add( object );\n\t\t\t\tsplineHelperObjects.push( object );\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t\tfunction addPoint() {\n\n\t\t\t\tsplinePointsLength ++;\n\n\t\t\t\tpositions.push( addSplineObject().position );\n\n\t\t\t\tupdateSplineOutline();\n\n\t\t\t}\n\n\t\t\tfunction removePoint() {\n\n\t\t\t\tif ( splinePointsLength <= 4 ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tconst point = splineHelperObjects.pop();\n\t\t\t\tsplinePointsLength --;\n\t\t\t\tpositions.pop();\n\n\t\t\t\tif ( transformControl.object === point ) transformControl.detach();\n\t\t\t\tscene.remove( point );\n\n\t\t\t\tupdateSplineOutline();\n\n\t\t\t}\n\n      let delay = 0\n\t\t\tfunction updateSplineOutline() {\n\n\t\t\t\tfor ( const k in splines ) {\n\n\t\t\t\t\tconst spline = splines[ k ];\n\n\t\t\t\t\tconst splineMesh = spline.mesh;\n\t\t\t\t\tconst position = splineMesh.geometry.attributes.position;\n\n\t\t\t\t\tfor ( let i = 0; i < ARC_SEGMENTS; i ++ ) {\n\n\t\t\t\t\t\tconst t = i / ( ARC_SEGMENTS - 1 );\n\t\t\t\t\t\tspline.getPoint( t, point );\n\t\t\t\t\t\tposition.setXYZ( i, point.x, point.y, point.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tposition.needsUpdate = true;\n\n        }\n\n        clearTimeout(delay)\n        delay = setTimeout(() => {\n          setArr(positions)\n        }, 10)\n\n\t\t\t}\n\n\t\t\tfunction exportSpline() {\n\n\t\t\t\tconst strplace = [];\n\n\t\t\t\tfor ( let i = 0; i < splinePointsLength; i ++ ) {\n\n\t\t\t\t\tconst p = splineHelperObjects[ i ].position;\n          strplace.push( `new THREE.Vector3(${p.x}, ${p.y}, ${p.z})` );\n          // 'new THREE.Vector3({0}, {1}, {2})'.format( p.x, p.y, p.z )\n\t\t\t\t}\n\n\t\t\t\tconsole.log( strplace.join( ',\\n' ) );\n\t\t\t\tconst code = '[' + ( strplace.join( ',\\n\\t' ) ) + ']';\n\t\t\t\tprompt( 'copy and paste code', code );\n\n\t\t\t}\n\n\t\t\tfunction load( new_positions ) {\n\n\t\t\t\twhile ( new_positions.length > positions.length ) {\n\n\t\t\t\t\taddPoint();\n\n\t\t\t\t}\n\n\t\t\t\twhile ( new_positions.length < positions.length ) {\n\n\t\t\t\t\tremovePoint();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < positions.length; i ++ ) {\n\n\t\t\t\t\tpositions[ i ].copy( new_positions[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tupdateSplineOutline();\n\n\t\t\t}\n\n\t\t\tfunction animate() {\n\n\t\t\t\trequestAnimationFrame( animate );\n\t\t\t\trender();\n\t\t\t\t// stats.update();\n\n\t\t\t}\n\n\t\t\tfunction render() {\n\n\t\t\t\tsplines.uniform.mesh.visible = params.uniform;\n\t\t\t\t// splines.centripetal.mesh.visible = params.centripetal;\n\t\t\t\t// splines.chordal.mesh.visible = params.chordal;\n\t\t\t\t// renderer.render( scene, camera );\n\n\t\t\t}\n\n\t\t\tfunction onPointerDown( event ) {\n\n\t\t\t\tonDownPosition.x = event.clientX;\n\t\t\t\tonDownPosition.y = event.clientY;\n\n\t\t\t}\n\n\t\t\tfunction onPointerUp() {\n\n\t\t\t\tonUpPosition.x = event.clientX;\n\t\t\t\tonUpPosition.y = event.clientY;\n\n\t\t\t\tif ( onDownPosition.distanceTo( onUpPosition ) === 0 ) transformControl.detach();\n\n\t\t\t}\n\n\t\t\tfunction onPointerMove( event ) {\n\n\t\t\t\tpointer.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n\t\t\t\tpointer.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\n\t\t\t\traycaster.setFromCamera( pointer, camera );\n\n\t\t\t\tconst intersects = raycaster.intersectObjects( splineHelperObjects );\n\n\t\t\t\tif ( intersects.length > 0 ) {\n\n\t\t\t\t\tconst object = intersects[ 0 ].object;\n\n\t\t\t\t\tif ( object !== transformControl.object ) {\n\n\t\t\t\t\t\ttransformControl.attach( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n  }\n\n\n}\n\n\nexport class LineGeo {\n  constructor ({ count = 100, numSides = 8, subdivisions = 50, openEnded = false, dimension = 2 }) {\n    // create a base CylinderGeometry which handles UVs, end caps and faces\n    const radius = 1;\n    const length = 1;\n    const baseGeometry = new THREE.CylinderGeometry(radius, radius, length, numSides, subdivisions, openEnded);\n\n    // fix the orientation so X can act as arc length\n    baseGeometry.rotateZ(Math.PI / 2);\n\n    // compute the radial angle for each position for later extrusion\n    const tmpVec = new THREE.Vector2();\n    const xPositions = [];\n    const angles = [];\n    const uvs = [];\n    const vertices = baseGeometry.vertices;\n    const faceVertexUvs = baseGeometry.faceVertexUvs[0];\n\n    // Now go through each face and un-index the geometry.\n    baseGeometry.faces.forEach((face, i) => {\n      const { a, b, c } = face;\n      const v0 = vertices[a];\n      const v1 = vertices[b];\n      const v2 = vertices[c];\n      const verts = [ v0, v1, v2 ];\n      const faceUvs = faceVertexUvs[i];\n\n      // For each vertex in this face...\n      verts.forEach((v, j) => {\n        tmpVec.set(v.y, v.z).normalize();\n\n        // the radial angle around the tube\n        const angle = Math.atan2(tmpVec.y, tmpVec.x);\n        angles.push(angle);\n\n        // \"arc length\" in range [-0.5 .. 0.5]\n        xPositions.push(v.x);\n\n        // copy over the UV for this vertex\n        uvs.push(faceUvs[j].toArray());\n      });\n    });\n\n    // build typed arrays for our attributes\n    const posArray = new Float32Array(xPositions);\n    const angleArray = new Float32Array(angles);\n    const uvArray = new Float32Array(uvs.length * 2);\n\n    // unroll UVs\n    for (let i = 0; i < posArray.length; i++) {\n      const [ u, v ] = uvs[i];\n      uvArray[i * 2 + 0] = u;\n      uvArray[i * 2 + 1] = v;\n    }\n\n    const geometry = new THREE.InstancedBufferGeometry();\n    geometry.instanceCount = count\n    geometry.setAttribute('position', new THREE.BufferAttribute(posArray, 1));\n    geometry.setAttribute('angle', new THREE.BufferAttribute(angleArray, 1));\n    geometry.setAttribute('uv', new THREE.BufferAttribute(uvArray, 2));\n\n    let offsets = []\n\n    if (dimension === 2) {\n      // cube\n      let ddxy = Math.ceil(Math.pow(count, 1 / 2)) - 1\n      for (let y = 0; y <= ddxy; y ++ ) {\n        for (let x = 0; x <= ddxy; x ++ ) {\n          offsets.push(\n            x / ddxy,\n            0,\n            y / ddxy\n          )\n        }\n      }\n    } else if (dimension === 3) {\n      // cube\n      let ddxyz = Math.ceil(Math.pow(count, 1 / 3))\n      for (let z = 0; z < ddxyz; z ++ ) {\n        for (let y = 0; y < ddxyz; y ++ ) {\n          for (let x = 0; x < ddxyz; x ++ ) {\n            offsets.push(\n              x / ddxyz,\n              y / ddxyz,\n              z / ddxyz\n            )\n          }\n        }\n      }\n    }\n\n    let reader = [];\n    let ddxy = Math.ceil(Math.pow(count, 1 / 2)) - 1\n    for (let y = 0; y <= ddxy; y ++ ) {\n      for (let x = 0; x <= ddxy; x ++ ) {\n        reader.push(\n          x / ddxy,\n          y / ddxy\n        )\n      }\n    }\n\n    geometry.setAttribute('reader', new THREE.InstancedBufferAttribute(new Float32Array(reader), 2));\n    geometry.setAttribute('offset', new THREE.InstancedBufferAttribute(new Float32Array( offsets ), 3));\n\n    // dispose old geometry since we no longer need it\n    baseGeometry.dispose();\n    return geometry;\n  }\n}\n\n\n/*\n\nn−1, n, n+1 and n+2\n\nvec3 pointIDX (float index) {\n  vec3 result = vec3(0.0);\n  for(int i=0; i  <10; ++i) {\n    float i_float = float(i);\n    if (i_float == index) {\n      result = controlPoints[i];\n    }\n  }\n  return result;\n}\n\nvec3 catmullRom (vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t) {\n    vec3 v0 = (p2 - p0) * 0.5;\n    vec3 v1 = (p3 - p1) * 0.5;\n    float t2 = t * t;\n    float t3 = t * t * t;\n\n    return vec3((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\n}\n\nvec3 getPointAt (float t) {\n  bool closed = false;\n  float ll = UNIFROM_CONTROL_POINTS_LENGTH;\n  float minusOne = 1.0;\n  if (closed) {\n    minusOne = 0.0;\n  }\n\n  float p = (ll - minusOne) * t;\n  float intPoint = floor(p);\n  float weight = p - intPoint;\n\n  float idx0 = intPoint - 1.0;\n  float idx1 = intPoint;\n  float idx2 = intPoint + 1.0;\n  float idx3 = intPoint + 2.0;\n\n  vec3 pt0 = pointIDX(idx0);\n  vec3 pt1 = pointIDX(idx1);\n  vec3 pt2 = pointIDX(idx2);\n  vec3 pt3 = pointIDX(idx3);\n\n  vec3 pointoutput = catmullRom(pt0, pt1, pt2, pt3, weight);\n\n  return pointoutput;\n}\n\n\n\nvec3 CatmullRom ( float u, vec3 x0, vec3 x1, vec3 x2, vec3 x3 ) {\n    float u2 = u * u;\n    float u3 = u2 * u;\n    return ((2 * x1) +\n           (-x0 + x2) * u +\n           (2*x0 - 5*x1 + 4*x2 - x3) * u2 +\n           (-x0 + 3*x1 - 3*x2 + x3) * u3) * 0.5f;\n}\n\n// ---------------------\n\nfunction catmullrom(a, b, c, d) {\n  const p = -0.5 * a + 1.5 * b - 1.5 * c + 0.5 * d,\n        q =        a - 2.5 * b + 2.0 * c - 0.5 * d,\n        r = -0.5 * a           + 0.5 * c          ,\n        s =                  b                    ;\n\n  return x => ((p * x + q) * x + r) * x + s;\n}\n\nvec4 makeOneControl (a, b, c, d) {\n  float p = -0.5 * a + 1.5 * b - 1.5 * c + 0.5 * d;\n  float q =        a - 2.5 * b + 2.0 * c - 0.5 * d;\n  float r = -0.5 * a           + 0.5 * c          ;\n  float s =                  b                    ;\n\n  return vec4(p, q, r, s);\n}\n\nvec3 plotCurve (float t, vec4 controlX, vec4 controlY, vec4 controlZ) {\n  float x = ((controlX.r * t + controlX.g) * t + controlX.b) * t + controlX.a;\n  float y = ((controlY.r * t + controlY.g) * t + controlY.b) * t + controlY.a;\n  float z = ((controlZ.r * t + controlZ.g) * t + controlZ.b) * t + controlZ.a;\n\n  return vec3(x, y, z);\n}\n\nvec3 makeXYZControlThenPlot (float weight, vec3 pt1, vec3 pt2, vec3 pt3, vec3 pt4) {\n  vec4 controlX = makeOneControl(pt1.x, pt2.x, pt3.x, pt4.x);\n  vec4 controlY = makeOneControl(pt1.y, pt2.y, pt3.y, pt4.y);\n  vec4 controlZ = makeOneControl(pt1.z, pt2.z, pt3.z, pt4.z);\n\n  return plotCurve(weight, controlX, controlY, controlZ);\n}\n\nfloat CatmullRom ( float u, float x0, float x1, float x2, float x3 ) {\n    float u2 = u * u;\n    float u3 = u2 * u;\n    return ((2 * x1) +\n           (-x0 + x2) * u +\n           (2*x0 - 5*x1 + 4*x2 - x3) * u2 +\n           (-x0 + 3*x1 - 3*x2 + x3) * u3) * 0.5f;\n}\n\n\n\n// ---------------------\n\nfloat bezierCurve(float t, float p0, float p1, float p2, float p3)\n{\n    float t2 = t * t;\n    float t3 = t2 * t;\n    return p0\n        +  3*(p1 - p0) * t\n        +  3*(p2 - 2*p1 + p0) * t2\n        +  (p3 - 3*(p2 - p1) - p0) * t3;\n}\n\n// ---------------------\n\n// Coefficients for Matrix M\n#define M11\t 0.0\n#define M12\t 1.0\n#define M13\t 0.0\n#define M14\t 0.0\n#define M21\t-0.5\n#define M22\t 0.0\n#define M23\t 0.5\n#define M24\t 0.0\n#define M31\t 1.0\n#define M32\t-2.5\n#define M33\t 2.0\n#define M34\t-0.5\n#define M41\t-0.5\n#define M42\t 1.5\n#define M43\t-1.5\n#define M44\t 0.5\n\ndouble catmullRomSpline(float x, float v0,float v1,\n\t\t\t\tfloat v2,float v3) {\n\n\tdouble c1,c2,c3,c4;\n\n\tc1 =  \t      M12*v1;\n\tc2 = M21*v0          + M23*v2;\n\tc3 = M31*v0 + M32*v1 + M33*v2 + M34*v3;\n\tc4 = M41*v0 + M42*v1 + M43*v2 + M44*v3;\n\n\treturn(((c4*x + c3)*x +c2)*x + c1);\n}\n\n\n// ---------------------\n\n\nstruct point\n{\n\tfloat x;\n\tfloat y;\n\tfloat z;\n};\n\n\nstruct point CatmullRoll(float t, struct point p1, struct point p2, struct point p3, struct point p4)\n{\n\n\tfloat t2 = t*t;\n\tfloat t3 = t*t*t;\n\tstruct point v; // Interpolated point\n\n\t// Catmull Rom spline Calculation\n\n\tv.x = ((-t3 + 2*t2-t)*(p1.x) + (3*t3-5*t2+2)*(p2.x) + (-3*t3+4*t2+t)* (p3.x) + (t3-t2)*(p4.x))/2;\n\tv.y = ((-t3 + 2*t2-t)*(p1.y) + (3*t3-5*t2+2)*(p2.y) + (-3*t3+4*t2+t)* (p3.y) + (t3-t2)*(p4.y))/2;\n\n\treturn v;\n}\n\n\n// ---------------------\n\n\n*/\n\n\n","// Core Code\nimport { EffectNode } from \"../../Core/EffectNode\"\n\n// Stack\nimport { Color, Scene } from \"three\"\nimport { GLRenderer } from \"../../WebGL/GLRenderer\"\nimport { GLCamera } from \"../../WebGL/GLCamera\"\n\n// Application Packages\nimport { Curves } from \"../Curves/Curves\"\n\nexport class CurvesCanvas extends EffectNode {\n  constructor ({ el }) {\n    super()\n\n    // Application Core\n    let ctx = this\n    this.el = el\n\n    this.renderer = new GLRenderer({ ctx })\n    this.camera = new GLCamera({ ctx })\n    this.camera.position.z = 10\n\n    this.scene = new Scene()\n    this.scene.background = new Color('#121212')\n\n    this.onLoop(() => {\n      this.renderer.render(this.scene, this.camera)\n    })\n\n    new Curves({ ctx: ctx.node({ name: 'CurveService' }) })\n  }\n}\n","<template>\n  <div class=\"full\">\n    <div class=\"full absolute top-0 left-0\" ref=\"kv1\"></div>\n    <div class=\"absolute top-0 left-0 text-white\" v-if=\"getApp\">\n      <MenuArea></MenuArea>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { CurvesCanvas } from '../Packages/Curves/CurvesCanvas.js'\nexport default {\n  components: {\n    MenuArea: require('./Menu.vue').default\n  },\n  data () {\n    return {\n      getApp: false\n    }\n  },\n  mounted () {\n    let _kv = new CurvesCanvas({ el: this.$refs.kv1 })\n    this.getApp = () => _kv\n    console.log(this.getApp())\n  },\n  beforeDestroy () {\n    window.location.reload()\n  }\n}\n</script>\n\n<style>\n</style>\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Curves.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Curves.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Curves.vue?vue&type=template&id=58ec1828&\"\nimport script from \"./Curves.vue?vue&type=script&lang=js&\"\nexport * from \"./Curves.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}